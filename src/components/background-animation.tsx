'use client';

import React, { useMemo, useEffect, useState } from 'react';

const icons = [
  // Python
  () => (
    <svg viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M16 31a7 7 0 0 0 7-7v-7.52h-7.52a1.48 1.48 0 0 1-1.48-1.48v-7a7 7 0 0 0-14 0h7a.48.48 0 0 1 .48.48v7.52H1V16a7 7 0 0 0 7 7h8Z" fill="#306998"/>
      <path d="M25 16a7 7 0 0 0-7 7v7.52h7.52a1.48 1.48 0 0 1 1.48 1.48v4a7 7 0 0 0 14 0h-7a.48.48 0 0 1-.48-.48V23H31a7 7 0 0 0-7-7h-8Z" fill="#FFD43B"/>
      <circle cx="10.5" cy="5.5" r="2" fill="#FFD43B" />
      <circle cx="21.5" cy="26.5" r="2" fill="#306998" />
    </svg>
  ),
  // TensorFlow
  () => (
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.3 5.4c-2.3-1.4-5.2-2-8.3-2v17.2c3.1 0 6-1 8.3-2.8 1.5-1.1 2.7-2.9 2.7-4.8s-1.2-3.7-2.7-4.8z" fill="#FF6F00"/><path d="M12.3 5.4c2.3-1.4 5.2-2 8.3-2v17.2c-3.1 0-6-1-8.3-2.8-1.5-1.1-2.7-2.9-2.7-4.8s1.2-3.7 2.7-4.8z" fill="#FFA000"/></svg>
  ),
  // PyTorch
  () => (
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M7.52 3.1C5.1 4.35 3.32 6.78 3.02 9.51c-.22 2.05.34 4.09 1.57 5.75.2.27.63.15.68-.2-1.3-4.57 1.83-8.88 6.4-10.18.3-.08.43-.46.15-.68a4.4 4.4 0 0 0-4.3-1.05zM12.98 20.9c2.42-1.25 4.2-3.68 4.5-6.41.22-2.05-.34-4.09-1.57-5.75-.2-.27-.63-.15-.68.2 1.3 4.57-1.83 8.88-6.4 10.18-.3.08-.43.46-.15.68.8.62 1.8.95 2.88.95a4.4 4.4 0 0 0 1.42-.2z" fill="#EE4C2C"/>
    </svg>
  ),
  // Flask
  () => (
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M18.8 3.3c-2.4-1.5-5.3-2-8.3-1.8-3.1.2-6 1.6-8.2 3.8-2.6 2.6-4 6.2-3.8 9.8.2 3.6 2.1 7 5.1 9.2 2.3 1.7 5.1 2.5 7.9 2.5s5.6-.8 7.9-2.5c3-2.2 4.9-5.6 5.1-9.2.2-3.6-1.2-7.2-3.8-9.8zm-5.7.8c.4 0 .7.3.7.7v4.3h3.5v-1c0-.4.3-.7.7-.7s.7.3.7.7v1.7c0 .4-.3.7-.7.7h-5.2c-.4 0-.7-.3-.7-.7V4.7c0-.4.3-.7.7-.7zM12 21.5c-4.7 0-8.5-3.8-8.5-8.5S7.3 4.5 12 4.5s8.5 3.8 8.5 8.5-3.8 8.5-8.5 8.5z" fill="#333"/>
    </svg>
  ),
  // LangChain
  () => (
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M9.82 2.16c-2.3.56-4.14 2.4-4.7 4.7-.22.88.5 1.63 1.4 1.4.9-.22 1.63-.5 1.4-1.4-.56-2.3 1.28-4.14 3.58-4.7C12.4.94 13.15.1 12.3.1c-.85 0-1.6.47-2.48 2.06z" fill="#8A2BE2"/>
      <path d="M21.84 14.18c-.56 2.3-2.4 4.14-4.7 4.7-.88.22-1.63-.5-1.4-1.4.22-.9.5-1.63 1.4-1.4 2.3.56 4.14-1.28 4.7-3.58.22-.9.98-1.65 2.08-1.4s1.28.94.72 1.98z" fill="#0000FF"/>
      <path d="M5.56 9.27c-3.13 1.35-4.4 5.3-2.6 8.35 1.4 2.4 4.1 3.5 6.7 2.8 3.1-1.3 4.4-5.3 2.6-8.3-1.3-2.4-4-3.5-6.7-2.85z" fill="#8A2BE2"/>
      <path d="M18.44 14.73c3.13-1.35 4.4-5.3 2.6-8.35-1.4-2.4-4.1-3.5-6.7-2.8-3.1 1.3-4.4 5.3-2.6 8.3 1.3 2.4 4.1 3.5 6.7 2.85z" fill="#0000FF"/>
    </svg>
  ),
  // FastAPI
  () => (
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z" fill="#009688"/>
    </svg>
  ),
  // MongoDB
  () => (
     <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M15.32,18.48A7.78,7.78,0,0,1,12,19.5c-3.79,0-6.89-2.73-6.89-6.11,0-2.22,1.38-4.2,3.48-5.26V7.87C6.08,8.85,4.5,11,4.5,13.39c0,4.42,4,8.11,8.11,8.11a8.5,8.5,0,0,0,2.71-.4V18.48Z" fill="#4DB33D"/>
      <path d="M12,2.5A8.11,8.11,0,0,0,8,4.19v2.55c2.31-1.29,5.2-1,7-.29a.6.6,0,0,1,.29.58V16.3a.6.6,0,0,1-1,.52,5.51,5.51,0,0,1-4.71-1.63V8.14a.6.6,0,0,1,.56-.63,5.18,5.18,0,0,1,3.43.9,1.19,1.19,0,0,0,1.19,0V4.6a1.18,1.18,0,0,0-1.18-.8A8.15,8.15,0,0,0,12,2.5Z" fill="#40A333"/>
    </svg>
  ),
  // Django
  () => (
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path fillRule="evenodd" clipRule="evenodd" d="M16 4H3v16h13l5-8-5-8zM7 16H5v-4h2v4zm4 0H9v-8h2v8zm4 0h-2v-6h2v6z" fill="#092E20"/>
    </svg>
  ),
  // AWS
  () => (
    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M4.32 18.25c.3.31.6.6.9.89.44.44.89.84 1.34 1.23a10.2 10.2 0 0013.12-1.23c.3-.3.6-.6.9-.89a10.2 10.2 0 00-16.26 0z" fill="#FF9900"/>
        <path d="M20.68 18.25a10.2 10.2 0 00-1.34-1.23 8.3 8.3 0 00-4.63-2.14l-.15 4.88c.63.1 1.25.29 1.85.57.9.43 1.74 1 2.47 1.7a.4.4 0 00.56-.56c-.2-.2-.4-.4-.6-.6a6.89 6.89 0 011.23-1.23c.2-.2.4-.4.6-.6z" fill="#232F3E"/>
        <path d="M12 2c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6z" fill="#FF9900"/>
        <path d="M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0 8c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3z" fill="#232F3E"/>
    </svg>
  ),
  // Hugging Face
  () => (
     <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M20.94 13.37c-.3-1.33-1.12-2.43-2.24-3.1-.38-.23-.84.1-.73.53l.42 1.5c.1.34-.1.7-.44.82-.4.12-.8-.1-.9-.45L16.2 8.2c-.1-.4-.5-.65-.9-.55l-2.6.6c-.4.1-.65.5-.55.9l1.1 4.5c.1.4.5.65.9.55l2.6-.6c.4-.1.65-.5.55-.9l-.3-1.2c-.1-.34.1-.7.44-.82.4-.12.8.1.9.45l.65 2.8c.2.8.9 1.3 1.7 1.3h.1c.9 0 1.7-.6 1.9-1.5.3-1.33.2-2.73-.1-4.03zM3.06 13.37c.3-1.33 1.12-2.43 2.24-3.1.38-.23.84.1.73.53l-.42 1.5c-.1.34.1.7.44.82.4.12.8-.1.9-.45l.85-3.5c.1-.4.5-.65.9-.55l2.6.6c.4.1.65.5.55.9L10.7 14.5c-.1.4-.5.65-.9.55l-2.6-.6c-.4-.1-.65-.5-.55-.9l.3-1.2c.1-.34-.1-.7-.44-.82-.4-.12-.8.1-.9.45L3.3 15.77c-.2.8-.9 1.3-1.7 1.3h-.1c-.9 0-1.7-.6-1.9-1.5-.3-1.33-.2-2.73.1-4.03.23-1.3.9-2.5 1.86-3.4 1-.9 2.2-1.5 3.6-1.8.4-.08.7.3.6.7l-.4 1.8c-.08.38.16.75.55.85.4.1.8-.1.9-.45l1.6-6.5C10.7.27 10.1 0 9.2 0H9c-1.1 0-2.1.8-2.3 1.9l-2 8.3c-.2.8.4 1.6 1.2 1.6h.1c.6 0 1.1-.3 1.4-.8l.2-.5z" fill="#FFD21E"/>
    </svg>
  ),
];

const iconCount = 15;

export function BackgroundAnimation() {
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  const animatedIcons = useMemo(() => {
    if (!isMounted) return [];

    return Array.from({ length: iconCount }).map((_, i) => {
      const Icon = icons[i % icons.length];
      const size = Math.random() * 60 + 40; // 40px to 100px
      const left = Math.random() * 100; // 0% to 100%
      const duration = Math.random() * 30 + 20; // 20s to 50s
      const delay = Math.random() * -25; // -25s to 0s

      return (
        <div
          key={i}
          className="icon-float"
          style={{
            width: `${size}px`,
            height: `${size}px`,
            left: `${left}%`,
            animationDuration: `${duration}s`,
            animationDelay: `${delay}s`,
          }}
        >
          <Icon />
        </div>
      );
    });
  }, [isMounted]);

  return <div className="background-animation">{animatedIcons}</div>;
}
